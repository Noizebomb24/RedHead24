import tkinter as tk
from tkinter import ttk
import time 
import mysql.connector
from tkinter import messagebox
from tkinter import scrolledtext
import random
class MotorAssemblyStateMachine:
    def __init__(self):
        self.states = ['Начало', 'Проверка компонентов', 'Установка подшипников', 'Сборка обмоток', 'Сборка ротора', 'Проверка и контроль качества', 'Тестирование двигателя', 'Завершено']  # Список состояний процесса
        self.current_state = 'Начало'
        self.db_connection = mysql.connector.connect(
            host="localhost",
            user="root",
            password="RedHead24!",
            database="kursach"
        )
        self.process_started = False

    def process_next_step(self):
        if self.current_state == 'Начало':
            self.current_state = 'Проверка компонентов'
        elif self.current_state == 'Проверка компонентов':
            self.current_state = 'Установка подшипников'
        elif self.current_state == 'Установка подшипников':
            self.current_state = 'Сборка обмоток'
        elif self.current_state == 'Сборка обмоток':
            self.current_state = 'Сборка ротора'
        elif self.current_state == 'Сборка ротора':
            self.current_state = 'Проверка и контроль качества'
        elif self.current_state == 'Проверка и контроль качества':
            self.current_state = 'Тестирование двигателя'
        elif self.current_state == 'Тестирование двигателя':
            self.current_state = 'Завершено'
        elif self.current_state == 'Завершено':
            self.current_state = 'Начало'
        time.sleep(1)
    
        if self.current_state != 'Начало' and self.current_state != 'Завершено':
            error_probability = random.randint(0, 100)
            if error_probability == 0:
                self.current_state_1 = self.current_state
                self.current_state = 'Ошибка'
                messagebox.showerror("Ошибка", f"Произошла ошибка на этапе: {self.current_state_1}")  # Показ сообщения об ошибке
                self.current_state = 'Начало'
                return

    def get_current_state(self):
        return self.current_state

    def execute_complex_query(self):
        cursor = self.db_connection.cursor()
        query = """
        SELECT e.Name AS ErrorName, dt.Name AS DefectTypeName
	  FROM Errors
        JOIN Defects d ON e.Identifier = d.Errors_Identifier
	  JOIN DefectTypes dt ON d.Identifier = dt.Defects_Identifier;
        """
        cursor.execute(query)
        result = cursor.fetchall()
        cursor.close()
        return result

    def execute_and_display_query(self):
        result = self.execute_complex_query()
        if len(result) == 0:
            messagebox.showinfo("Результат", "Запрос не вернул результатов.")
        else:
            result_text.delete(1.0, tk.END)
            header = ['Error Name', 'Defect Type Name']
            result_text.insert(tk.END, '{:<20} | {:<20}\n'.format(header[0], header[1]))
            result_text.insert(tk.END, '-' * 41 + '\n')
            for row in result:
                result_text.insert(tk.END, '{:<20} | {:<20}\n'.format(row[0], row[1]))

    def update_state(self):
        current_state = self.get_current_state()
        progress = self.states.index(current_state) / (len(self.states) - 1)
        for i, state in enumerate(self.states):
            if state == current_state:
                state_labels[i].config(foreground='green')
            else:
                state_labels[i].config(foreground='black')
        progress_bar['value'] = int(progress * 100)
        if current_state != 'Процесс завершен' and current_state != 'Ошибка':
            self.process_next_step()
            window.after(1000, self.update_state)
        else:
            if current_state == 'Процесс завершен':
                state_labels[-1].config(foreground='green')
                state_labels[-1].config(text='Процесс завершен')
            elif current_state == 'Ошибка':
                state_labels[-1].config(foreground='red')
                state_labels[-1].config(text='Произошла ошибка')

    def start_process(self):
        if not self.process_started:
            self.process_started = True
            self.update_state()

    def execute_query(self):
        self.execute_and_display_query()


window = tk.Tk()
frame1 = tk.Frame(window)
frame1.pack(pady=10)
state_labels = []
motor_assembly = MotorAssemblyStateMachine()

for state in motor_assembly.states:
    state_label = tk.Label(frame1, text=state)
    state_label.pack(side='left', padx=10)
    state_labels.append(state_label)

progress_bar = ttk.Progressbar(window, orient='horizontal', length=300, mode='determinate')
progress_bar.pack(pady=10)

start_button = tk.Button(window, text='Запустить процесс', command=motor_assembly.start_process)
start_button.pack()

execute_button = tk.Button(window, text='Выполнить запрос', command=motor_assembly.execute_query)
execute_button.pack()

frame2 = tk.Frame(window)
frame2.pack(pady=10)
result_text = scrolledtext.ScrolledText(frame2, height=10, width=50)
result_text.pack()

window.mainloop()

